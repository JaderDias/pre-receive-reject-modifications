NAME
    pre-receive-reject-modifications - A configurable Git hook to intelligently
    reject pushes of modifications to existing files

SYNOPSIS
        pre-receive-reject-modifications --help
        pre-receive-reject-modifications --man

        # To actually make this hook do anything wrap it in a shellscript
        # that does this
        pre-receive-reject-modifications --dry-run=0

        # Do whatever we would have done but fail in cases where we'd
        # succeed, for testing purposes
        pre-receive-reject-modifications --dry-run=0 --always-fail

        # By default we only emit NOTICE level output on STDERR, that can
        # be made a lot more verbose with DEBUG or TRACE. We can also pipe
        # DEBUG or TRACE output to a log command, see
        # hook.pre-receive-reject-modifications.log-command.
        pre-receive-reject-modifications --dry-run=0 --log-level=TRACE

DESCRIPTION
    This is a Git hook meant to be set up as a "pre-receive" hook (see
    githooks(5)) that'll reject the modification of existing files in a
    repository.

    The general strategy of this hook is that when we get a push for a given
    "master" branch we'll do a "log --name-status" of "$branch..$to" and find
    all the commits that modify or delete existing files.

    We only care about updates to the "master" branch for two reasons, one
    is that if you're e.g. doing some temporary work and committing some
    modifications to a custom branch temporarily that's fine as long as that
    branch doesn't make it to "master", and eventually gets deleted from
    $whatever.git.

    The other is that if you we were to reject pushes to other branches,
    especially newly created ones we'd have to deal with the special case of
    deciding what to use as the merge-base for that branch. Do we use the
    "master" branch? do we validate the entire history? Easier to just not
    deal with it. Want the hook to do something smart about that? Patches
    welcome.

    Keep in mind though that this is deliberately written to be fast on
    humongous repositories, so anything that breaks that promise would have
    to at least be optional.

    We do handle the initial push to the "master" branch itself by just
    validating the entire history being pushed.

INSTALLATION
    Our only dependencies are a working perl interpreter. We only depend on
    modules that have shipped with perl itself forever, so this hook should
    just work out of the box on any *nix-like OS that has perl installed.

    To enable it for a given bare repository you want to push to just create
    a hook/pre-receive with something like:

        #!/bin/sh
        /path/to/where/you/cloned-pre-receive-reject-modifications/pre-receive-reject-modifications --dry-run=0

    See "CONFIGURATION" below for how to configure it. We shell out to "git
    config" so you can enable this configuration per-repository, or globally
    (via e.g. /etc/gitconfig) or any combination of the two.

CONFIGURATION
    Here's an example of what a typical configuration for this hook might
    look like:

        [hook "pre-receive-reject-modifications"]
            master-branch-name = master
            support-contact = "git@lists.example.com or the 'support' Jabber channel"
            log-command = /gitroot/contrib/hooks/pre-receive-reject-modifications/log-command
            log-command-level = TRACE
            blocked-push-command = /gitroot/contrib/hooks/pre-receive-reject-modifications/blocked-push-command

    For example commands for the "*-command" switches see the examples/
    directory in the pre-receive-reject-modifications Git distribution for an
    example of what the author uses this hook for.

    Detailed documentation about each option below:

  hook.pre-receive-reject-modifications.master-branch-name
    The "master" branch name you want to not allow modification pushes to. Usually
    "master", can also be "trunk" or whatever.

  hook.pre-receive-reject-modifications.support-contact
    A string we'll use when we reject the push as the support contact, e.g.
    an E-Mail address or Jabber channel.

  hook.pre-receive-reject-modifications.log-command
    An executable script that we'll pipe all our output into. Useful for
    e.g. spewing all output users see into a log.

  hook.pre-receive-reject-modifications.log-command-level
    The log level we'll use for the output given to the
    "hook.pre-receive-reject-modifications.log-command". Can be "NOTICE", "DEBUG"
    or "TRACE". The "NOTICE" messages are the messages we show to users,
    anything above that is verbose output mainly intended to debug this
    script.

  hook.pre-receive-reject-modifications.blocked-push-command
    A command we'll run whenever this hook blocks a push, it'll get all the
    output we emit piped into it. Useful for e.g. sending a mail whenever we
    have a blocked push.

AUTHORS
    Ævar Arnfjörð Bjarmason <avar@cpan.org>
    Jader Dias <jaderd@gmail.com>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2014 by Ævar Arnfjörð Bjarmason
    <avar@cpan.org>

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

